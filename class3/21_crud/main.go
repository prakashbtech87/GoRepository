package main

import (
	"encoding/json" // Import for JSON encoding/decoding
	"fmt"           // Import for formatted I/O
	"net/http"      // Import for making HTTP requests
	"strings"       // Import for string manipulation
)

// Define a struct named Todo to match the JSON structure
type Todo struct {
	UserId    int    `json:"userId"` // UserId field will be encoded/decoded as "userId"
	ID        int    `json:"id"`     // ID field will be encoded/decoded as "id"
	Title     string `json:"title"`  // Title field will be encoded/decoded as "title"
	Completed bool   // Completed field has no JSON tag, defaults to the field name
}

// Function to perform a GET request to fetch a specific Todo item
func PerformGetRequest() {
	const myUrl = "https://jsonplaceholder.typicode.com/todos/1" // URL to fetch data from
	response, err := http.Get(myUrl)                             // Make the GET request
	if err != nil {
		fmt.Println("Error making GET request:", err) // Handle HTTP request error
		return
	}
	defer response.Body.Close() // Ensure the response body is closed after function execution

	// Check if the response status is OK (200)
	if response.StatusCode != http.StatusOK {
		fmt.Println("Error: failed to fetch data:", response.StatusCode) // Handle non-OK response
		return
	}

	var todo Todo                                      // Create a variable to hold the decoded Todo item
	err = json.NewDecoder(response.Body).Decode(&todo) // Decode the JSON response into the Todo struct
	if err != nil {
		fmt.Println("Error decoding JSON:", err) // Handle JSON decoding error
		return
	}

	// Print the fields of the decoded Todo item
	fmt.Println("Todo Id:", todo.ID)
	fmt.Println("Todo Title:", todo.Title)
	fmt.Println("Todo Completed:", todo.Completed)
}

// Function to perform a POST request to add a new Todo item
func PerformPostRequest() {
	const myUrl = "https://jsonplaceholder.typicode.com/todos" // URL to send POST request to

	// Create a new Todo item
	todo := Todo{
		UserId:    1,
		ID:        201, // Normally, ID is generated by the server, but we set it manually here for illustration
		Title:     "Learn Go!",
		Completed: false,
	}

	// Convert the todo struct to JSON
	jsonData, err := json.Marshal(todo)
	if err != nil {
		fmt.Println("Error encoding JSON:", err) // Handle JSON encoding error
		return
	}

	// Convert the JSON byte slice to a string
	jsonStr := string(jsonData)

	// Create an io.Reader from the string
	jsonReader := strings.NewReader(jsonStr)

	// Send the POST request
	resp, err := http.Post(myUrl, "application/json", jsonReader) // Set the Content-Type to application/json
	if err != nil {
		fmt.Println("Error making POST request:", err) // Handle POST request error
		return
	}
	defer resp.Body.Close() // Ensure the response body is closed after function execution

	// Print the response status code
	fmt.Println("Response Status:", resp.Status) // Print the status of the POST response
}

func main() {
	// Uncomment the following line to perform the GET request
	// PerformGetRequest()

	// Perform the POST request
	PerformPostRequest()
}
